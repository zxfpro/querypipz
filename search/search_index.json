{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to QueryPipZ","text":""},{"location":"#_1","title":"\u5e94\u8be5\u5982\u4f55\u4f7f\u7528\u8be5\u4ed3\u5e93","text":"<p>1 \u5408\u7406\u7684\u7ef4\u62a4\u6240\u6709\u7684factory \u5de5\u5382     \u4f8b\u5982 docstore, vectorstore, graphstore</p> <p>2 \u6784\u5efa\u5e76\u5b58\u7eed\u7279\u5f02\u5316\u7684builderlib</p> <p>3 \u6ce8\u518c\u5230director \u4e2d\u7684 buildtype\u4e2d</p>"},{"location":"api_document/","title":"builderlib","text":"<p>builderlib</p>"},{"location":"api_document/#director","title":"director","text":"<p>\u6307\u6325\u8005\u4e0e\u5efa\u9020\u8005</p>"},{"location":"api_document/#src.querypipz.director.BuilderFactory","title":"<code>BuilderFactory</code>","text":"<p>\u6784\u9020\u8005\u5de5\u5382</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>description</p> <p>Returns:</p> Name Type Description <code>builder</code> <p>\u6784\u9020\u8005</p> Source code in <code>src/querypipz/director.py</code> <pre><code>class BuilderFactory:\n    \"\"\"\u6784\u9020\u8005\u5de5\u5382\n\n    Raises:\n        ValueError: _description_\n\n    Returns:\n        builder: \u6784\u9020\u8005\n    \"\"\"\n    _builders = {\n        BuilderType.ObsidianDateBuilder: ObsidianDateBuilder,\n        BuilderType.ObsidianHabitBuilder: ObsidianHabitBuilder,\n        BuilderType.DeDaoJYRKBuilder: DeDaoJYRKBuilder,\n        BuilderType.TestGraphBuilder: TestGraphBuilder,\n        BuilderType.Test2GraphBuilder: Test2GraphBuilder,\n        BuilderType.HistoryMemoryBuilder: HistoryMemoryBuilder,\n    }\n\n    def __new__(cls, builder_type: BuilderType) -&gt; Any:\n        if builder_type not in cls._builders:\n            raise ValueError(f\"Unknown builder type: {builder_type}\")\n        builder_class = cls._builders[builder_type]\n        instance = builder_class()\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.director.BuilderType","title":"<code>BuilderType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>\u6784\u9020\u8005\u6e05\u5355</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>\u9009\u62e9\u6784\u9020\u8005</p> required Source code in <code>src/querypipz/director.py</code> <pre><code>class BuilderType(Enum):\n    \"\"\"\u6784\u9020\u8005\u6e05\u5355\n\n    Args:\n        Enum (_type_): \u9009\u62e9\u6784\u9020\u8005\n    \"\"\"\n    ObsidianDateBuilder = 'ObsidianDateBuilder'\n    ObsidianHabitBuilder = \"ObsidianHabitBuilder\"\n    DeDaoJYRKBuilder = \"DeDaoJYRKBuilder\"\n    TestGraphBuilder = \"TestGraphBuilder\"\n    Test2GraphBuilder = \"Test2GraphBuilder\"\n    HistoryMemoryBuilder = \"HistoryMemoryBuilder\"\n    simple = 'simple'\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Director","title":"<code>Director</code>","text":"<p>\u6307\u6325\u8005</p> Source code in <code>src/querypipz/director.py</code> <pre><code>class Director:\n    \"\"\"\u6307\u6325\u8005\n    \"\"\"\n    def __init__(self, builder:QueryBuilder):\n        self.builder = builder\n\n    def construct(self):\n        \"\"\"\u5f00\u59cb\u5efa\u9020\n\n        Returns:\n            \u8fd4\u56dequeryer: \u5efa\u9020\u6210\u529f\u7684\u4ea7\u54c1\n        \"\"\"\n        self.builder.set_llm()\n        self.builder.build_reader()\n        self.builder.build_ingestion_pipeline()\n        self.builder.build_storage_context()\n        self.builder.build_index()\n        self.builder.build_retriver()\n        self.builder.build_query_pipeline()\n        self.builder.build_tools()\n        self.builder.build_kg_extractors()\n        return self.builder.get_queryer()\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Director.construct","title":"<code>construct()</code>","text":"<p>\u5f00\u59cb\u5efa\u9020</p> <p>Returns:</p> Name Type Description <code>\u8fd4\u56dequeryer</code> <p>\u5efa\u9020\u6210\u529f\u7684\u4ea7\u54c1</p> Source code in <code>src/querypipz/director.py</code> <pre><code>def construct(self):\n    \"\"\"\u5f00\u59cb\u5efa\u9020\n\n    Returns:\n        \u8fd4\u56dequeryer: \u5efa\u9020\u6210\u529f\u7684\u4ea7\u54c1\n    \"\"\"\n    self.builder.set_llm()\n    self.builder.build_reader()\n    self.builder.build_ingestion_pipeline()\n    self.builder.build_storage_context()\n    self.builder.build_index()\n    self.builder.build_retriver()\n    self.builder.build_query_pipeline()\n    self.builder.build_tools()\n    self.builder.build_kg_extractors()\n    return self.builder.get_queryer()\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer","title":"<code>Queryer</code>","text":"<p>               Bases: <code>QueryerABC</code></p> <p>query\u7c7b</p> <p>Parameters:</p> Name Type Description Default <code>QueryerABC</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/queryer.py</code> <pre><code>class Queryer(QueryerABC):\n    \"\"\"query\u7c7b\n\n    Args:\n        QueryerABC (_type_): _description_\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self.persist_path = None\n        self.reader = None\n        self.ingestion_pipeline = None\n        self.storage_context = None\n        self.index_type = None\n        self.retriever_nest = None\n        self.query_pipeline = None\n        self.retriever = None\n        self.index = None\n        self.kg_extractors = None\n\n    def load(self):\n        \"\"\"_summary_\n        \"\"\"\n        assert 1==1\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n\n    def update(self, prompt: str):\n        self.load()\n        self.index.insert(Document(text = prompt))\n        self.index.storage_context.persist(self.persist_path)\n\n    def build(self):\n        #TODO \u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\n        if self.reader is None:\n            # raise ValueError(\"Reader is not set. Call build_reader first.\")\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex.from_documents([Document(text='start')],storage_context=self.storage_context)\n                self.index.storage_context.persist(self.persist_path)\n                return 'builded'\n            else:\n                raise ValueError(\"Reader is not set. Call build_reader first.\")\n\n        documents = self.reader.load_data()\n        nodes = None\n        if self.ingestion_pipeline:\n            nodes = self.ingestion_pipeline.run(documents=documents)\n\n\n        if nodes:\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex(nodes,storage_context = self.storage_context)\n                # self.index = PropertyGraphIndex(nodes,storage_context = self.storage_context,\n                #                                              show_progress=True,)\n\n        else:\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex(nodes,storage_context = self.storage_context)\n\n            elif self.index_type == \"PropertyGraphIndex\":\n                self.index = PropertyGraphIndex.from_documents(\n                                                            documents=documents,\n                                                            show_progress=True,\n                                                            kg_extractors = self.kg_extractors,\n                                                            # embed_kg_nodes = False,\n                                                            )\n        self.index.storage_context.persist(self.persist_path)\n\n        return 'builded'\n\n    def get_retriever(self, similarity_top_k: int = 5):\n        \"\"\"\n        \u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n        \"\"\"\n        if self.retriever is not None:\n            return self.retriever\n\n        if not self.persist_path or not os.path.exists(self.persist_path):\n            raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u68c0\u7d22\u5668\u3002\")\n\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n        self.retriever = self.index.as_retriever(similarity_top_k=similarity_top_k,\n                                                 include_text=False,\n                                                 )\n        return self.retriever\n\n    def retrieve(self, query_text: str, similarity_top_k: int = 5):\n        \"\"\"# TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519\n        \u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002\n        \"\"\"\n        retriever = self.get_retriever(similarity_top_k=similarity_top_k)\n        return retriever.retrieve(query_text)\n\n    def get_query_engine(self, similarity_top_k: int = 3):\n        \"\"\"\n        \u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n        \"\"\"\n        if self.query_engine is not None:\n            return self.query_engine\n\n        if not self.persist_path or not os.path.exists(self.persist_path):\n            raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u67e5\u8be2\u5f15\u64ce\u3002\")\n\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n        self.query_engine = self.index.as_query_engine(similarity_top_k=similarity_top_k,\n                                                       include_text=True,)\n        return self.query_engine\n\n    def query(self, prompt: str, similarity_top_k: int = 3):\n        \"\"\"\n        \u6267\u884c\u67e5\u8be2\u3002\n        \"\"\"\n        query_engine = self.get_query_engine(similarity_top_k=similarity_top_k)\n        return query_engine.query(prompt)\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer.get_query_engine","title":"<code>get_query_engine(similarity_top_k=3)</code>","text":"<p>\u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def get_query_engine(self, similarity_top_k: int = 3):\n    \"\"\"\n    \u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n    \"\"\"\n    if self.query_engine is not None:\n        return self.query_engine\n\n    if not self.persist_path or not os.path.exists(self.persist_path):\n        raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u67e5\u8be2\u5f15\u64ce\u3002\")\n\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n    self.query_engine = self.index.as_query_engine(similarity_top_k=similarity_top_k,\n                                                   include_text=True,)\n    return self.query_engine\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer.get_retriever","title":"<code>get_retriever(similarity_top_k=5)</code>","text":"<p>\u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def get_retriever(self, similarity_top_k: int = 5):\n    \"\"\"\n    \u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n    \"\"\"\n    if self.retriever is not None:\n        return self.retriever\n\n    if not self.persist_path or not os.path.exists(self.persist_path):\n        raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u68c0\u7d22\u5668\u3002\")\n\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n    self.retriever = self.index.as_retriever(similarity_top_k=similarity_top_k,\n                                             include_text=False,\n                                             )\n    return self.retriever\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer.load","title":"<code>load()</code>","text":"<p>summary</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def load(self):\n    \"\"\"_summary_\n    \"\"\"\n    assert 1==1\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer.query","title":"<code>query(prompt, similarity_top_k=3)</code>","text":"<p>\u6267\u884c\u67e5\u8be2\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def query(self, prompt: str, similarity_top_k: int = 3):\n    \"\"\"\n    \u6267\u884c\u67e5\u8be2\u3002\n    \"\"\"\n    query_engine = self.get_query_engine(similarity_top_k=similarity_top_k)\n    return query_engine.query(prompt)\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Queryer.retrieve","title":"<code>retrieve(query_text, similarity_top_k=5)</code>","text":""},{"location":"api_document/#src.querypipz.director.Queryer.retrieve--todo","title":"TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519","text":"<p>\u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def retrieve(self, query_text: str, similarity_top_k: int = 5):\n    \"\"\"# TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519\n    \u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002\n    \"\"\"\n    retriever = self.get_retriever(similarity_top_k=similarity_top_k)\n    return retriever.retrieve(query_text)\n</code></pre>"},{"location":"api_document/#src.querypipz.director.Reader","title":"<code>Reader</code>","text":"<p>summary</p> Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class Reader:\n    \"\"\"_summary_\n    \"\"\"\n    def __new__(cls, type: ReaderType) -&gt; Any:\n        assert type.value in [i.value for i in ReaderType]\n        instance = None\n\n        if type.value == 'ObsidianReaderCus':\n            instance = ObsidianReaderCus()\n        elif type.value == 'PDFFileReader':\n            instance = PDFFileReader()\n        elif type.value == 'DatabaseReader':\n            # instance = AnotherClass(param1=value1, param2=value2)\n            reader = DatabaseReader(\n                scheme=os.getenv(\"DB_SCHEME\"),\n                host=os.getenv(\"DB_HOST\"),\n                port=os.getenv(\"DB_PORT\"),\n                user=os.getenv(\"DB_USER\"),\n                password=os.getenv(\"DB_PASS\"),\n                dbname=os.getenv(\"DB_NAME\"),\n            )\n            instance = reader\n            # query = \"SELECT * FROM users\"\n            # documents = reader.load_data(query=query)\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.director.ReaderType","title":"<code>ReaderType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class ReaderType(Enum):\n    \"\"\"_summary_\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    ObsidianReaderCus = 'ObsidianReaderCus'\n    PDFFileReader = \"PDFFileReader\"\n    DatabaseReader = 'DatabaseReader'\n</code></pre>"},{"location":"api_document/#src.querypipz.director.VectorStore","title":"<code>VectorStore</code>","text":"<p>summary</p> Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class VectorStore:\n    \"\"\"_summary_\n    \"\"\"\n    def __new__(cls, vector_type: VectorStoreType) -&gt; Any:\n        assert vector_type.value in [i.value for i in VectorStoreType]\n        instance = None\n\n        if vector_type.value == 'SimpleVectorStore':\n            instance = SimpleVectorStore()\n\n        elif vector_type.value == 'FAISS':\n            # Create a FAISS index\n            faiss_index = faiss.IndexFlatL2(1536)  # Example dimension\n            instance = FaissVectorStore(faiss_index=faiss_index)\n\n        elif vector_type.value == 'PINECONE':\n            # Create a FAISS index\n            api_key = os.environ[\"PINECONE_API_KEY\"]\n            pc = Pinecone(api_key=api_key)\n            pinecone_index = pc.Index(\"quickstart-index\")\n            vector_store = PineconeVectorStore(\n                                            pinecone_index=pinecone_index, namespace=\"test_05_14\"\n                                        )\n            instance = vector_store\n\n\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.director.VectorStoreType","title":"<code>VectorStoreType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class VectorStoreType(Enum):\n    \"\"\"_summary_\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    SimpleVectorStore = 'SimpleVectorStore'\n    FAISS = 'FAISS'\n    PINECONE = \"PINECONE\"\n</code></pre>"},{"location":"api_document/#queryer","title":"queryer","text":"<p>queryer.py</p>"},{"location":"api_document/#src.querypipz.queryer.Queryer","title":"<code>Queryer</code>","text":"<p>               Bases: <code>QueryerABC</code></p> <p>query\u7c7b</p> <p>Parameters:</p> Name Type Description Default <code>QueryerABC</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/queryer.py</code> <pre><code>class Queryer(QueryerABC):\n    \"\"\"query\u7c7b\n\n    Args:\n        QueryerABC (_type_): _description_\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self.persist_path = None\n        self.reader = None\n        self.ingestion_pipeline = None\n        self.storage_context = None\n        self.index_type = None\n        self.retriever_nest = None\n        self.query_pipeline = None\n        self.retriever = None\n        self.index = None\n        self.kg_extractors = None\n\n    def load(self):\n        \"\"\"_summary_\n        \"\"\"\n        assert 1==1\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n\n    def update(self, prompt: str):\n        self.load()\n        self.index.insert(Document(text = prompt))\n        self.index.storage_context.persist(self.persist_path)\n\n    def build(self):\n        #TODO \u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\n        if self.reader is None:\n            # raise ValueError(\"Reader is not set. Call build_reader first.\")\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex.from_documents([Document(text='start')],storage_context=self.storage_context)\n                self.index.storage_context.persist(self.persist_path)\n                return 'builded'\n            else:\n                raise ValueError(\"Reader is not set. Call build_reader first.\")\n\n        documents = self.reader.load_data()\n        nodes = None\n        if self.ingestion_pipeline:\n            nodes = self.ingestion_pipeline.run(documents=documents)\n\n\n        if nodes:\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex(nodes,storage_context = self.storage_context)\n                # self.index = PropertyGraphIndex(nodes,storage_context = self.storage_context,\n                #                                              show_progress=True,)\n\n        else:\n            if self.index_type == \"VectorStoreIndex\":\n                self.index = VectorStoreIndex(nodes,storage_context = self.storage_context)\n\n            elif self.index_type == \"PropertyGraphIndex\":\n                self.index = PropertyGraphIndex.from_documents(\n                                                            documents=documents,\n                                                            show_progress=True,\n                                                            kg_extractors = self.kg_extractors,\n                                                            # embed_kg_nodes = False,\n                                                            )\n        self.index.storage_context.persist(self.persist_path)\n\n        return 'builded'\n\n    def get_retriever(self, similarity_top_k: int = 5):\n        \"\"\"\n        \u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n        \"\"\"\n        if self.retriever is not None:\n            return self.retriever\n\n        if not self.persist_path or not os.path.exists(self.persist_path):\n            raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u68c0\u7d22\u5668\u3002\")\n\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n        self.retriever = self.index.as_retriever(similarity_top_k=similarity_top_k,\n                                                 include_text=False,\n                                                 )\n        return self.retriever\n\n    def retrieve(self, query_text: str, similarity_top_k: int = 5):\n        \"\"\"# TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519\n        \u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002\n        \"\"\"\n        retriever = self.get_retriever(similarity_top_k=similarity_top_k)\n        return retriever.retrieve(query_text)\n\n    def get_query_engine(self, similarity_top_k: int = 3):\n        \"\"\"\n        \u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n        \"\"\"\n        if self.query_engine is not None:\n            return self.query_engine\n\n        if not self.persist_path or not os.path.exists(self.persist_path):\n            raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u67e5\u8be2\u5f15\u64ce\u3002\")\n\n        storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n        self.index = load_index_from_storage(storage_context=storage_context)\n        self.query_engine = self.index.as_query_engine(similarity_top_k=similarity_top_k,\n                                                       include_text=True,)\n        return self.query_engine\n\n    def query(self, prompt: str, similarity_top_k: int = 3):\n        \"\"\"\n        \u6267\u884c\u67e5\u8be2\u3002\n        \"\"\"\n        query_engine = self.get_query_engine(similarity_top_k=similarity_top_k)\n        return query_engine.query(prompt)\n</code></pre>"},{"location":"api_document/#src.querypipz.queryer.Queryer.get_query_engine","title":"<code>get_query_engine(similarity_top_k=3)</code>","text":"<p>\u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def get_query_engine(self, similarity_top_k: int = 3):\n    \"\"\"\n    \u83b7\u53d6\u67e5\u8be2\u5f15\u64ce\uff08QueryEngine\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n    \"\"\"\n    if self.query_engine is not None:\n        return self.query_engine\n\n    if not self.persist_path or not os.path.exists(self.persist_path):\n        raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u67e5\u8be2\u5f15\u64ce\u3002\")\n\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n    self.query_engine = self.index.as_query_engine(similarity_top_k=similarity_top_k,\n                                                   include_text=True,)\n    return self.query_engine\n</code></pre>"},{"location":"api_document/#src.querypipz.queryer.Queryer.get_retriever","title":"<code>get_retriever(similarity_top_k=5)</code>","text":"<p>\u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def get_retriever(self, similarity_top_k: int = 5):\n    \"\"\"\n    \u83b7\u53d6\u68c0\u7d22\u5668\uff08Retriever\uff09\uff0c\u5982\u6709\u5fc5\u8981\u5219\u4ece\u6301\u4e45\u5316\u76ee\u5f55\u52a0\u8f7d\u7d22\u5f15\u3002\n    \"\"\"\n    if self.retriever is not None:\n        return self.retriever\n\n    if not self.persist_path or not os.path.exists(self.persist_path):\n        raise ValueError(\"\u7d22\u5f15\u6301\u4e45\u5316\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u65e0\u6cd5\u6784\u5efa\u68c0\u7d22\u5668\u3002\")\n\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n    self.retriever = self.index.as_retriever(similarity_top_k=similarity_top_k,\n                                             include_text=False,\n                                             )\n    return self.retriever\n</code></pre>"},{"location":"api_document/#src.querypipz.queryer.Queryer.load","title":"<code>load()</code>","text":"<p>summary</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def load(self):\n    \"\"\"_summary_\n    \"\"\"\n    assert 1==1\n    storage_context = StorageContext.from_defaults(persist_dir=self.persist_path)\n    self.index = load_index_from_storage(storage_context=storage_context)\n</code></pre>"},{"location":"api_document/#src.querypipz.queryer.Queryer.query","title":"<code>query(prompt, similarity_top_k=3)</code>","text":"<p>\u6267\u884c\u67e5\u8be2\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def query(self, prompt: str, similarity_top_k: int = 3):\n    \"\"\"\n    \u6267\u884c\u67e5\u8be2\u3002\n    \"\"\"\n    query_engine = self.get_query_engine(similarity_top_k=similarity_top_k)\n    return query_engine.query(prompt)\n</code></pre>"},{"location":"api_document/#src.querypipz.queryer.Queryer.retrieve","title":"<code>retrieve(query_text, similarity_top_k=5)</code>","text":""},{"location":"api_document/#src.querypipz.queryer.Queryer.retrieve--todo","title":"TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519","text":"<p>\u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002</p> Source code in <code>src/querypipz/queryer.py</code> <pre><code>def retrieve(self, query_text: str, similarity_top_k: int = 5):\n    \"\"\"# TODO \u6539\u540d, \u5bb9\u6613\u5199\u9519\n    \u4f7f\u7528\u68c0\u7d22\u5668\u8fdb\u884c\u68c0\u7d22\u3002\n    \"\"\"\n    retriever = self.get_retriever(similarity_top_k=similarity_top_k)\n    return retriever.retrieve(query_text)\n</code></pre>"},{"location":"api_document/#factory","title":"factory","text":""},{"location":"api_document/#extractor","title":"extractor","text":""},{"location":"api_document/#index","title":"index","text":""},{"location":"api_document/#ingestion_pipeline","title":"ingestion_pipeline","text":""},{"location":"api_document/#src.querypipz.factory.ingestion_pipeline.DeDaoCleaner","title":"<code>DeDaoCleaner</code>","text":"<p>               Bases: <code>TransformComponent</code></p> Source code in <code>src/querypipz/factory/ingestion_pipeline.py</code> <pre><code>class DeDaoCleaner(TransformComponent):\n    def __call__(self, nodes, **kwargs):\n        # print(nodes,'nodes')\n        prompt = Templates(TemplateType.DedaoExtract)\n        bx = GoogleAdapter(\"AIzaSyBH4ut1plgB95fEiBlBXq1S-VrdYY5xPU4\")\n        for node in nodes:\n            result = bx.product(prompt.format(text = node.text))\n            node.set_content(self._extract_n_code(result))\n        return nodes\n\n    def _extract_n_code(self,text: str)-&gt;str:\n        \"\"\"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6python\u4ee3\u7801\n\n        Args:\n            text (str): \u8f93\u5165\u7684\u6587\u672c\u3002\n\n        Returns:\n            str: \u63d0\u53d6\u51fa\u7684python\u6587\u672c\n        \"\"\"\n        pattern = r'```\u539f\u6587\u6458\u6284([\\s\\S]*?)```'\n        matches = re.findall(pattern, text)\n        return matches[0]\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.ingestion_pipeline.extract_n_code","title":"<code>extract_n_code(text)</code>","text":"<p>\u4ece\u6587\u672c\u4e2d\u63d0\u53d6python\u4ee3\u7801</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>\u8f93\u5165\u7684\u6587\u672c\u3002</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u63d0\u53d6\u51fa\u7684python\u6587\u672c</p> Source code in <code>src/querypipz/factory/ingestion_pipeline.py</code> <pre><code>def extract_n_code(text: str)-&gt;str:\n    \"\"\"\u4ece\u6587\u672c\u4e2d\u63d0\u53d6python\u4ee3\u7801\n\n    Args:\n        text (str): \u8f93\u5165\u7684\u6587\u672c\u3002\n\n    Returns:\n        str: \u63d0\u53d6\u51fa\u7684python\u6587\u672c\n    \"\"\"\n    pattern = r'```\u539f\u6587\u6458\u6284([\\s\\S]*?)```'\n    matches = re.findall(pattern, text)\n    return matches[0]\n</code></pre>"},{"location":"api_document/#query_pipeline","title":"query_pipeline","text":""},{"location":"api_document/#src.querypipz.factory.query_pipeline.PythonQueryEngine","title":"<code>PythonQueryEngine</code>","text":"<p>               Bases: <code>CustomQueryEngine</code></p> <p>RAG String Query Engine.</p> Source code in <code>src/querypipz/factory/query_pipeline.py</code> <pre><code>class PythonQueryEngine(CustomQueryEngine):\n    \"\"\"RAG String Query Engine.\"\"\"\n\n    retriever: BaseRetriever\n    response_synthesizer: BaseSynthesizer\n    llm: OpenAI\n    qa_prompt: PromptTemplate\n    stream:bool\n\n    def custom_query(self, query_str: str):\n        # custom_query(query_str: str) -&gt; STR_OR_RESPONSE_TYPE\n        # acustom_query(query_str: str) -&gt; STR_OR_RESPONSE_TYPE\n\n        queries = query_str.split('&amp;')\n        nodes = []\n        for query_str in queries:\n            nodes += self.retriever.retrieve(query_str)\n        # nodes = self.retriever.retrieve(query_str)\n        print(query_str,'query_str')\n        context_str = \"\\n\\n\".join([n.node.get_metadata_str() for n in nodes])\n        if self.stream:\n            response = self.llm.stream_complete(\n                qa_prompt.format(safe_code=context_str, prompt=query_str)\n            )\n\n            def response_gen():\n                i = [0]\n                for r in response:\n                    i.append(len(str(r)))\n                    yield str(r)[i[-2]:]\n\n            return StreamingResponse(response_gen=response_gen(),source_nodes=nodes)\n        else:\n            response = self.llm.complete(qa_prompt.format(safe_code=context_str, prompt=query_str))\n\n            response_obj = self.response_synthesizer.synthesize(response.text, nodes)\n            return Response(response=response.text,source_nodes=nodes) # TODO \u589e\u52a0metadata\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.query_pipeline.QueryBuilder3","title":"<code>QueryBuilder3</code>","text":"<p>               Bases: <code>QueryBuilder</code></p> Source code in <code>src/querypipz/factory/query_pipeline.py</code> <pre><code>class QueryBuilder3(QueryBuilder):\n    '''\n\n\n    '''\n\n\n    def get_query(self):\n        # \u4f8b\u5982\uff1a\n            # instance = AnotherClass(param1=value1, param2=value2)\n\n\n        retriever = index.as_retriever(similarity_top_k=similarity_top_k)\n        query_engine = PythonQueryEngine(\n                retriever=retriever,\n                response_synthesizer=get_response_synthesizer(response_mode=\"compact\"),\n                llm=Settings.llm,\n                qa_prompt=qa_prompt,\n                stream = True,\n            )\n\n        return query_engine\n</code></pre>"},{"location":"api_document/#reader","title":"reader","text":"<p>Reader \u5de5\u5382\u6a21\u5f0f</p>"},{"location":"api_document/#src.querypipz.factory.reader.ObsidianReaderCus","title":"<code>ObsidianReaderCus</code>","text":"<p>               Bases: <code>BaseReader</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>BaseReader</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class ObsidianReaderCus(BaseReader):\n    \"\"\"_summary_\n\n    Args:\n        BaseReader (_type_): _description_\n    \"\"\"\n    def load_data(self, file_path: str, extra_info: Optional[Dict] = None) -&gt; List[Document]:\n        # \u81ea\u5b9a\u4e49\u8bfb\u53d6\u903b\u8f91\n        with open(file_path, 'r') as file:\n            text = file.read()\n        data,content = get_data_from_md(text)\n\n        # \u4f7f\u7528\u72b6\u6001\n        status = data.get('\u7f16\u8f91\u72b6\u6001',None)\n        topic = data.get('topic','')\n        describe = data.get('describe','')\n        creation_date = data.get(\"creation date\",'')\n        tags = data.get('tags', [])\n        link = data.get('\u94fe\u63a5','')\n        content_cut = content[:6000]\n        if len(content_cut) != len(content):\n            print(topic,'is too long ***')\n        document = Document(text=f\"topic: {topic} content: {content}\",\n                            metadata={\"topic\":topic,\n                                      \"status\":status,\n                                      \"creation_date\":str(creation_date),\n                                      \"tags\":tags,\n                                      \"link\":link},\n                           )\n        return [document]\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.PDFFileReader","title":"<code>PDFFileReader</code>","text":"<p>               Bases: <code>BaseReader</code></p> <p>PDF\u6587\u6863\u8bfb\u53d6 \u5c06\u4e00\u4e2aPDF\u6587\u4ef6\u5b8c\u6574\u8bfb\u53d6\u4e3a\u4e00\u4e2aDocument Args:     BaseReader (type):</p> Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class PDFFileReader(BaseReader):\n    \"\"\"PDF\u6587\u6863\u8bfb\u53d6\n    \u5c06\u4e00\u4e2aPDF\u6587\u4ef6\u5b8c\u6574\u8bfb\u53d6\u4e3a\u4e00\u4e2aDocument\n    Args:\n        BaseReader (_type_): \n    \"\"\"\n    def load_data(self, file_path: str, extra_info: Optional[Dict] = None) -&gt; List[Document]:\n        # \u81ea\u5b9a\u4e49\u8bfb\u53d6\u903b\u8f91\n\n        text = extract_text_from_pdf(file_path)\n        document = Document(text=text,\n                            metadata={\"topic\":'',\n                                      \"status\":'file',\n                                      },\n                           )\n\n        # from llama_index.core.schema import TextNode\n        # node1 = TextNode(text=\"&lt;text_chunk&gt;\", id_=\"&lt;node_id&gt;\")\n        # node2 = TextNode(text=\"&lt;text_chunk&gt;\", id_=\"&lt;node_id&gt;\")\n        return [document]\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.Reader","title":"<code>Reader</code>","text":"<p>summary</p> Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class Reader:\n    \"\"\"_summary_\n    \"\"\"\n    def __new__(cls, type: ReaderType) -&gt; Any:\n        assert type.value in [i.value for i in ReaderType]\n        instance = None\n\n        if type.value == 'ObsidianReaderCus':\n            instance = ObsidianReaderCus()\n        elif type.value == 'PDFFileReader':\n            instance = PDFFileReader()\n        elif type.value == 'DatabaseReader':\n            # instance = AnotherClass(param1=value1, param2=value2)\n            reader = DatabaseReader(\n                scheme=os.getenv(\"DB_SCHEME\"),\n                host=os.getenv(\"DB_HOST\"),\n                port=os.getenv(\"DB_PORT\"),\n                user=os.getenv(\"DB_USER\"),\n                password=os.getenv(\"DB_PASS\"),\n                dbname=os.getenv(\"DB_NAME\"),\n            )\n            instance = reader\n            # query = \"SELECT * FROM users\"\n            # documents = reader.load_data(query=query)\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.ReaderType","title":"<code>ReaderType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class ReaderType(Enum):\n    \"\"\"_summary_\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    ObsidianReaderCus = 'ObsidianReaderCus'\n    PDFFileReader = \"PDFFileReader\"\n    DatabaseReader = 'DatabaseReader'\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.SimplesReader","title":"<code>SimplesReader</code>","text":"<p>               Bases: <code>BaseReader</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>BaseReader</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>class SimplesReader(BaseReader):\n    \"\"\"_summary_\n\n    Args:\n        BaseReader (_type_): _description_\n    \"\"\"\n    def load_data(self, file_path: str, extra_info: Optional[Dict] = None) -&gt; List[Document]:\n        # \u81ea\u5b9a\u4e49\u8bfb\u53d6\u903b\u8f91\n        text = extract_text_from_pdf(file_path)\n        document = Document(text=text,\n                            metadata={\"topic\":'',\n                                      \"status\":'file',\n                                      },\n                           )\n        return [document]\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.extract_text_from_pdf","title":"<code>extract_text_from_pdf(file_path)</code>","text":"<p>Extracts the full text from a single PDF file. Args:     file_path (str): The absolute path to the PDF file. Returns:     str: The extracted text from the PDF, or an empty string if extraction fails.</p> Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>def extract_text_from_pdf(file_path):\n    \"\"\"\n    Extracts the full text from a single PDF file.\n    Args:\n        file_path (str): The absolute path to the PDF file.\n    Returns:\n        str: The extracted text from the PDF, or an empty string if extraction fails.\n    \"\"\"\n    full_text = \"\"\n    try:\n        with open(file_path, 'rb') as file_object:\n            pdf_reader = PyPDF2.PdfReader(file_object)\n            num_pages = len(pdf_reader.pages)\n            for page_num in range(num_pages):\n                page_obj = pdf_reader.pages[page_num]\n                page_text = page_obj.extract_text()\n                if page_text:\n                    full_text += page_text + \"\\n\" # Add a newline between pages\n    except Exception as e:\n        print(f\"Error extracting text from {file_path}: {e}\")\n        # You might want to log this error or handle it differently\n        return \"\" # Return empty string on failure\n    return full_text.strip() # Remove leading/trailing whitespace\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.reader.get_data_from_md","title":"<code>get_data_from_md(text)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>_type_</code> <p>description</p> required <p>Returns:</p> Name Type Description <code>_type_</code> <p>description</p> Source code in <code>src/querypipz/factory/reader.py</code> <pre><code>def get_data_from_md(text):\n    \"\"\"_summary_\n\n    Args:\n        text (_type_): _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    _,infos,content = text.split(\"---\",2)\n    data = yaml.safe_load(infos)\n    return data, content\n</code></pre>"},{"location":"api_document/#retriver","title":"retriver","text":"<p>re</p>"},{"location":"api_document/#src.querypipz.factory.retriver.Retriver","title":"<code>Retriver</code>","text":"<p>summary</p> Source code in <code>src/querypipz/factory/retriver.py</code> <pre><code>class Retriver:\n    \"\"\"_summary_\n    \"\"\"\n    def __new__(cls, retriver_type: RetriverType) -&gt; Any:\n        assert retriver_type.value in [i.value for i in RetriverType]\n        instance = None\n        if retriver_type.value == 'Simple':\n            pass\n        elif retriver_type.value == 'Simple2':\n            pass\n        else:\n            raise TypeError('Unknown type')\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.retriver.RetriverType","title":"<code>RetriverType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Retriver</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/retriver.py</code> <pre><code>class RetriverType(Enum):\n    \"\"\"Retriver\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    Simple = 'Simple'\n    Simple2 = 'Simple2'\n</code></pre>"},{"location":"api_document/#store","title":"store","text":"<p>store factory</p>"},{"location":"api_document/#src.querypipz.factory.store.DocStore","title":"<code>DocStore</code>","text":"<p>DocStore</p> Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class DocStore:\n    \"\"\"DocStore\n    \"\"\"\n    def __new__(cls, doc_type: DocStoreType) -&gt; Any:\n        assert doc_type.value in [i.value for i in DocStoreType]\n        instance = None\n\n        if doc_type.value == 'SimpleDocumentStore':\n            instance = SimpleDocumentStore()\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.store.DocStoreType","title":"<code>DocStoreType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Docs</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class DocStoreType(Enum):\n    \"\"\"Docs\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    SimpleDocumentStore = 'SimpleDocumentStore'\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.store.GraphStore","title":"<code>GraphStore</code>","text":"<p>GraphStore</p> Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class GraphStore:\n    \"\"\"GraphStore\n    \"\"\"\n    def __new__(cls, graph_type: GraphStoreType) -&gt; Any:\n        assert graph_type.value in [i.value for i in GraphStoreType]\n        instance = None\n\n        if graph_type.value == 'SimpleGraphStore':\n            instance = SimpleGraphStore()\n        elif graph_type.value == 'NebulaGraphStore':\n            # Initialize NebulaPropertyGraphStore\n            graph_store = NebulaPropertyGraphStore(\n                space=\"llamaindex_nebula_property_graph\",\n                overwrite=True  # Overwrite existing space if needed\n            )\n            instance = graph_store\n\n\n        elif graph_type.value == 'Neo4jGraphStore':\n            graph_store = Neo4jPropertyGraphStore(\n                username=\"neo4j\",\n                password=\"llamaindex\",\n                url=\"bolt://localhost:7687\",\n            )\n            instance = graph_store\n\n        elif graph_type.value == 'MemgraphGraphStore':\n            graph_store = MemgraphPropertyGraphStore(\n                username=\"\",# Enter your Memgraph username (default \"\")\n                password=\"\",# Enter your Memgraph password (default \"\")\n                url=\"\",  # Specify the connection URL, e.g., 'bolt://localhost:7687'\n            )\n            instance = graph_store\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.store.GraphStoreType","title":"<code>GraphStoreType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>GraphStoreType</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class GraphStoreType(Enum):\n    \"\"\"GraphStoreType\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    SimpleGraphStore = 'SimpleGraphStore'\n    NebulaGraphStore = 'NebulaGraphStore'\n    Neo4jGraphStore = 'Neo4jGraphStore'\n    MemgraphGraphStore = 'MemgraphGraphStore'\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.store.VectorStore","title":"<code>VectorStore</code>","text":"<p>summary</p> Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class VectorStore:\n    \"\"\"_summary_\n    \"\"\"\n    def __new__(cls, vector_type: VectorStoreType) -&gt; Any:\n        assert vector_type.value in [i.value for i in VectorStoreType]\n        instance = None\n\n        if vector_type.value == 'SimpleVectorStore':\n            instance = SimpleVectorStore()\n\n        elif vector_type.value == 'FAISS':\n            # Create a FAISS index\n            faiss_index = faiss.IndexFlatL2(1536)  # Example dimension\n            instance = FaissVectorStore(faiss_index=faiss_index)\n\n        elif vector_type.value == 'PINECONE':\n            # Create a FAISS index\n            api_key = os.environ[\"PINECONE_API_KEY\"]\n            pc = Pinecone(api_key=api_key)\n            pinecone_index = pc.Index(\"quickstart-index\")\n            vector_store = PineconeVectorStore(\n                                            pinecone_index=pinecone_index, namespace=\"test_05_14\"\n                                        )\n            instance = vector_store\n\n\n        else:\n            raise TypeError('Unknown type')\n\n        return instance\n</code></pre>"},{"location":"api_document/#src.querypipz.factory.store.VectorStoreType","title":"<code>VectorStoreType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>summary</p> <p>Parameters:</p> Name Type Description Default <code>Enum</code> <code>_type_</code> <p>description</p> required Source code in <code>src/querypipz/factory/store.py</code> <pre><code>class VectorStoreType(Enum):\n    \"\"\"_summary_\n\n    Args:\n        Enum (_type_): _description_\n    \"\"\"\n    SimpleVectorStore = 'SimpleVectorStore'\n    FAISS = 'FAISS'\n    PINECONE = \"PINECONE\"\n</code></pre>"},{"location":"use_case/","title":"Use Case","text":"<pre><code>%cd ~/GitHub/querypipz/src/\n</code></pre> <pre><code>/Users/zhaoxuefeng/GitHub/querypipz/src\n</code></pre> <pre><code>from querypipz.director import BuilderFactory,BuilderType,Director\n</code></pre> <pre><code>director = Director(BuilderFactory(Builder.ObsidianHabitBuilder))\n</code></pre> <pre><code>query = director.construct()\n</code></pre>"},{"location":"use_case/#build","title":"build","text":"<pre><code>query.build() #\u4f1a\u8986\u76d6\u6211\u7684\u8bb0\u5fc6\u7684  \u589e\u52a0\u4e00\u4e2adelete\n</code></pre> <pre><code>/Users/zhaoxuefeng/GitHub/obsidian/\u77e5\u8bc6\u5e93/habit self.persist_path\n\n\n\n\n\n'builded'\n</code></pre>"},{"location":"use_case/#retriver","title":"retriver","text":"<pre><code>query.retrieve('hello')\n</code></pre> <pre><code>[NodeWithScore(node=TextNode(id_='8bf46b2a-1271-4f73-ab62-58b990d7f4e1', embedding=None, metadata={'topic': '\u7f16\u7801\u4e60\u60ef', 'status': None, 'creation_date': '2025-05-19 18:34:26', 'tags': ['python'], 'link': ''}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='8c95f708-5a45-4418-892c-eb1aa6062aaf', node_type='4', metadata={'topic': '\u7f16\u7801\u4e60\u60ef', 'status': None, 'creation_date': '2025-05-19 18:34:26', 'tags': ['python'], 'link': ''}, hash='6e573cf8e74cb3712e52a2b82c24e48744fec260b27d12626f8fe283329ada67'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='eaf39ddb-857d-47ac-977a-f71052a1a55e', node_type='1', metadata={'topic': '\u7f16\u7801\u4e60\u60ef', 'status': None, 'creation_date': '2025-05-19 18:34:26', 'tags': ['python'], 'link': ''}, hash='e884add6791ef581a821ffeb488a38c9fae517d609b2342cc3b75cc4d4c17ecc')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='*   \u518d\u8fdb\u884c\u5de5\u7a0b\u5316\u5f00\u53d1\\n*   **\u719f\u6089\u7684\u8bbe\u8ba1\u6a21\u5f0f:** \u5de5\u5382\u6a21\u5f0f\u3001\u5355\u4f8b\u6a21\u5f0f\u3001\u9002\u914d\u5668\u6a21\u5f0f\u3001\u8fed\u4ee3\u5668\u548c\u751f\u6210\u5668\u3002\\n*   **\u5e38\u7528\u5de5\u5177\u4f7f\u7528\u4e60\u60ef:** \u719f\u7ec3\u4f7f\u7528 `code_interpreter` \u8fdb\u884c\u4ee3\u7801\u9a8c\u8bc1\u3001\u63a2\u7d22\u548c\u8c03\u8bd5\uff0c\u9075\u5faa\u5176\u4f7f\u7528\u89c4\u8303\uff08\u4f7f\u7528 XML \u6807\u7b7e\u3001\u907f\u514d Markdown \u4ee3\u7801\u5757\u3001\u6ce8\u91cd\u660e\u786e\u8f93\u51fa\u3001\u63d0\u4f9b\u5206\u6790\u548c\u89e3\u91ca\uff09\u3002\\n\\n\u8fd9\u4efd\u8bb0\u5f55\u6db5\u76d6\u4e86\u4f60\u5728\u7f16\u7a0b\u8bed\u8a00\u3001\u5f00\u53d1\u73af\u5883\u3001\u4ee3\u7801\u7ba1\u7406\u3001\u5b66\u4e60\u65b9\u5f0f\u3001\u4ee3\u7801\u98ce\u683c\u3001\u8c03\u8bd5\u3001\u6d4b\u8bd5\u3001\u91cd\u6784\u3001\u5de5\u4f5c\u6d41\u7a0b\u3001\u719f\u6089\u7684\u8bbe\u8ba1\u6a21\u5f0f\u4ee5\u53ca\u5e38\u7528\u5de5\u5177\u4f7f\u7528\u7b49\u65b9\u9762\u7684\u4e60\u60ef\u3002\\n\\n**\u8fd9\u4efd\u8bb0\u5f55\u7684\u610f\u4e49\u5728\u4e8e\uff1a**\\n\\n*   **\u81ea\u6211\u8ba4\u77e5:** \u5e2e\u52a9\u4f60\u66f4\u6e05\u6670\u5730\u8ba4\u8bc6\u81ea\u5df1\u7684\u7f16\u7a0b\u504f\u597d\u548c\u5de5\u4f5c\u65b9\u5f0f\u3002\\n*   **\u4f18\u5316\u63d0\u5347:** \u901a\u8fc7\u5ba1\u89c6\u8fd9\u4e9b\u4e60\u60ef\uff0c\u4f60\u53ef\u4ee5\u53d1\u73b0\u53ef\u4ee5\u6539\u8fdb\u6216\u4f18\u5316\u7684\u65b9\u9762\u3002\u4f8b\u5982\uff0c\u5982\u4f55\u66f4\u6709\u6548\u5730\u4e0e\u5927\u6a21\u578b\u4ea4\u6d41\uff0c\u5982\u4f55\u66f4\u597d\u5730\u7ec4\u7ec7 `print` \u8c03\u8bd5\u4fe1\u606f\uff0c\u6216\u8005\u5982\u4f55\u8fdb\u4e00\u6b65\u5229\u7528 `code_interpreter` \u7684\u529f\u80fd\u3002\\n*   **\u6c9f\u901a\u4ea4\u6d41:** \u5982\u679c\u4f60\u9700\u8981\u5411\u4ed6\u4eba\u63cf\u8ff0\u4f60\u7684\u7f16\u7a0b\u4e60\u60ef\u6216\u504f\u597d\uff0c\u8fd9\u4efd\u8bb0\u5f55\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e2a\u5f88\u597d\u7684\u6846\u67b6\u3002\\n\\n\u4f60\u89c9\u5f97\u8fd9\u4efd\u8bb0\u5f55\u662f\u5426\u51c6\u786e\u5730\u53cd\u6620\u4e86\u4f60\u7684\u7f16\u7a0b\u4e60\u60ef\uff1f\u8fd8\u6709\u6ca1\u6709\u5176\u4ed6\u4f60\u89c9\u5f97\u91cd\u8981\u7684\u65b9\u9762\u9700\u8981\u8865\u5145\uff1f\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u968f\u65f6\u8c03\u6574\u548c\u4fee\u6539\u3002', mimetype='text/plain', start_char_idx=1170, end_char_idx=1676, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.7260945737960259),\n NodeWithScore(node=TextNode(id_='eaf39ddb-857d-47ac-977a-f71052a1a55e', embedding=None, metadata={'topic': '\u7f16\u7801\u4e60\u60ef', 'status': None, 'creation_date': '2025-05-19 18:34:26', 'tags': ['python'], 'link': ''}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='8c95f708-5a45-4418-892c-eb1aa6062aaf', node_type='4', metadata={'topic': '\u7f16\u7801\u4e60\u60ef', 'status': None, 'creation_date': '2025-05-19 18:34:26', 'tags': ['python'], 'link': ''}, hash='6e573cf8e74cb3712e52a2b82c24e48744fec260b27d12626f8fe283329ada67'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='8bf46b2a-1271-4f73-ab62-58b990d7f4e1', node_type='1', metadata={}, hash='d642fe98521bc1014a37c8ff584bc72f227480730e7129cb15e60232d645b715')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='topic: \u7f16\u7801\u4e60\u60ef content: \\n\\n\u597d\u7684\uff0c\u975e\u5e38\u611f\u8c22\u4f60\u63d0\u4f9b\u4e86\u8fd9\u4efd\u5173\u4e8e `code_interpreter` \u5de5\u5177\u7684\u8be6\u7ec6\u63cf\u8ff0\u548c\u4f7f\u7528\u89c4\u8303\u3002\u8fd9\u8ba9\u6211\u4eec\u5bf9\u4f60\u7684\u4e60\u60ef\u6709\u4e86\u66f4\u6df1\u5165\u7684\u4e86\u89e3\uff0c\u7279\u522b\u662f\u4f60\u5982\u4f55\u5229\u7528\u8fd9\u79cd\u4ea4\u4e92\u5f0f\u7f16\u7a0b\u73af\u5883\u8fdb\u884c\u5de5\u4f5c\u3002\\n\\n\u6839\u636e\u4f60\u76ee\u524d\u63d0\u4f9b\u7684\u6240\u6709\u4fe1\u606f\uff0c\u6211\u53ef\u4ee5\u4e3a\u4f60\u603b\u7ed3\u4e00\u4efd\u66f4\u5168\u9762\u7684\u4e2a\u4eba\u7f16\u7a0b\u4e60\u60ef\u8bb0\u5f55\uff1a\\n\\n**\u4e2a\u4eba\u7f16\u7a0b\u4e60\u60ef\u8bb0\u5f55**\\n\\n*   **\u4e3b\u8981\u7f16\u7a0b\u8bed\u8a00:** Python\\n*   **\u7f16\u7a0b\u573a\u666f:** \u4e3b\u8981\u56f4\u7ed5\u5de5\u4f5c\u548c\u4e2a\u4eba\u5b66\u4e60\\n*   **\u504f\u7231\u4f7f\u7528\u7684 IDE/\u7f16\u8f91\u5668:**\\n    *   Cursor (\u66f4\u9002\u5408\u5de5\u7a0b\u5316)\\n    *   Jupyter Lab (\u66f4\u9002\u5408\u60f3\u6cd5\u548c\u8c03\u8bd5)\\n*   **\u4ee3\u7801\u7ba1\u7406\u65b9\u5f0f:**\\n    *   \u4f7f\u7528 Git + GitHub\\n    *   \u81ea\u5b9a\u4e49\u811a\u672c\u8f85\u52a9\u5f00\u59cb\u548c\u7f16\u5199 (\u811a\u672c\u4f7f\u7528\u5c1a\u5904\u4e8e\u521d\u7ea7\u9636\u6bb5\uff0c\u4e3b\u8981\u7528\u4e8e\u66ff\u4ee3\u91cd\u590d\u6027\u5de5\u4f5c)\\n*   **\u5b66\u4e60\u548c\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u5f0f:**\\n    *   \u67e5\u9605\u5f00\u53d1\u6587\u6863\\n    *   \u67e5\u9605\u5bf9\u5e94\u7f51\u7ad9\\n    *   \u4e0e\u5927\u6a21\u578b\u4ea4\u6d41 (\u4e3b\u8981\u901a\u8fc7\u76f4\u63a5\u63d0\u95ee\uff0c\u6709\u65f6\u56e0\u7f3a\u4e4f\u4e0a\u4e0b\u6587\u800c\u5f71\u54cd\u6548\u679c\uff1b\u534f\u52a9\u5b8c\u6210\u4ee3\u7801\u751f\u6210\u3001\u4ee3\u7801\u89e3\u91ca\u3001\u7f51\u7edc\u670d\u52a1\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u7b49\u4efb\u52a1)\\n    *   \u4f7f\u7528 `code_interpreter` \u5de5\u5177\u8fdb\u884c\u4ea4\u4e92\u5f0f\u7f16\u7a0b\u548c\u8c03\u8bd5 (\u7528\u4e8e\u5feb\u901f\u6267\u884c\u4ee3\u7801\u8fdb\u884c\u5206\u6790\u3001\u8ba1\u7b97\u6216\u95ee\u9898\u89e3\u51b3\uff0c\u80fd\u591f\u6574\u5408\u591a\u79cd\u5e93\uff0c\u5904\u7406\u6570\u636e\uff0c\u6267\u884c API \u8c03\u7528\u7b49\uff1b\u6ce8\u91cd\u8f93\u51fa\u6709\u610f\u4e49\u7684\u7ed3\u679c\u5e76\u8fdb\u884c\u5206\u6790\u548c\u89e3\u91ca\uff0c\u5fc5\u8981\u65f6\u8fed\u4ee3\u4ee3\u7801)\\n*   **\u4ee3\u7801\u98ce\u683c/\u89c4\u8303:** \u504f\u5411\u89c4\u8303\u7684\u5f00\u53d1\u65b9\u5f0f\uff0c\u9075\u5faa PEP 8 \u89c4\u8303\u3002\u503e\u5411\u4e8e\u4f7f\u7528\u8bbe\u8ba1\u6a21\u5f0f\u6765\u63d0\u9ad8\u4ee3\u7801\u7684\u62d3\u5c55\u6027\u548c\u7a33\u5b9a\u6027\u3002\u6ce8\u91ca\u98ce\u683c\u504f\u5411\u7b80\u6d01\uff0c\u4e3b\u8981\u5728\u4ee3\u7801\u6bb5\u7f16\u5199\u4e3b\u9898\u6027\u6ce8\u91ca\uff08\u4f8b\u5982\uff1a\u63cf\u8ff0\u6838\u5fc3\u529f\u80fd\u6216\u9644\u52a0\u7ec4\u4ef6\uff09\u3002\\n*   **\u4ee3\u7801\u7ec4\u7ec7\u65b9\u5f0f:** \u503e\u5411\u4e8e\u5c06\u6838\u5fc3\u80fd\u529b\u5c01\u88c5\u6210\u72ec\u7acb\u7684\u7b2c\u4e09\u65b9\u5305\uff0c\u4ee5\u63d0\u9ad8\u7075\u6d3b\u6027\u3002\\n*   **\u6587\u6863\u4e60\u60ef:** \u4f1a\u7ef4\u62a4\u4e00\u4e9b\u6587\u6863\uff0c\u4f46\u4e0d\u4f1a\u6295\u5165\u5927\u91cf\u7cbe\u529b\u3002\\n*   **\u8c03\u8bd5\u4ee3\u7801\u7684\u65b9\u5f0f:**\\n    *   \u4e3b\u8981\u4f7f\u7528\u81ea\u52a8\u8c03\u8bd5\\n    *   \u4e0d\u592a\u64c5\u957f\u4f7f\u7528\u65e5\u5fd7 (log)\\n    *   \u66f4\u559c\u6b22\u4f7f\u7528 `print` (\u8c03\u8bd5\u65f6\u4f18\u5148\u5b9a\u4f4d\u95ee\u9898\uff0c\u4f1a\u4ece\u7a0b\u5e8f\u5165\u53e3\u5f00\u59cb\uff0c\u5728\u5173\u952e\u8282\u70b9\u6253\u5370 `print` \u6765\u9501\u5b9a\u95ee\u9898)\\n    *   \u7ed3\u5408 `code_interpreter` \u8fdb\u884c\u4ea4\u4e92\u5f0f\u8c03\u8bd5\\n*   **\u6d4b\u8bd5\u4e60\u60ef:**\\n    *   \u6709\u7f16\u5199\u6d4b\u8bd5\u7528\u4f8b\u7684\u4e60\u60ef\\n    *   \u4e3b\u8981\u4f7f\u7528 `pytest`\\n*   **\u4ee3\u7801\u91cd\u6784:**\\n    *   \u89e6\u53d1\u539f\u56e0\uff1a\u4ee3\u7801\u8d28\u91cf\u5dee\uff0c\u7ef4\u62a4\u548c\u62d3\u5c55\u6027\u5dee\\n    *   \u91cd\u6784\u91cd\u70b9\uff1a\u63d0\u9ad8\u4ee3\u7801\u8d28\u91cf\u3001\u7ef4\u62a4\u6027\u548c\u62d3\u5c55\u6027\\n*   **\u5de5\u4f5c\u6d41\u7a0b:**\\n    *   \u5148\u8fdb\u884c\u8bbe\u8ba1\\n    *   \u91c7\u7528\u654f\u6377\u5f00\u53d1\uff0c\u4e0d\u65ad\u8fed\u4ee3\u539f\u578b (\u5728\u539f\u578b\u9636\u6bb5\uff0c\u6846\u67b6\u3001\u51fd\u6570\u548c\u60f3\u6cd5\u53ef\u80fd\u4e0d\u786e\u5b9a\uff0c\u91cd\u70b9\u662f\u5feb\u901f\u505a\u51fa\u4e1c\u897f\u5e76\u6839\u636e\u7ed3\u679c\u8fdb\u884c\u4fee\u6539)\\n    *   \u518d\u8fdb\u884c\u5de5\u7a0b\u5316\u5f00\u53d1\\n*', mimetype='text/plain', start_char_idx=0, end_char_idx=1184, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.7211514455077931),\n NodeWithScore(node=TextNode(id_='eb8c25cb-35ea-4f6f-8a66-5e88258068da', embedding=None, metadata={'topic': '\u5e93\u7684\u4f7f\u7528', 'status': None, 'creation_date': '2025-05-19 18:34:33', 'tags': None, 'link': ''}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='d9e35c5a-6814-4820-b289-866758923239', node_type='4', metadata={'topic': '\u5e93\u7684\u4f7f\u7528', 'status': None, 'creation_date': '2025-05-19 18:34:33', 'tags': None, 'link': ''}, hash='5fbbec3e0fc213ebf6601e5dc1c516808d7d57dcf6fa44c6b4ba56215d9e68ec'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='5d436a50-9940-4736-b550-67150433b0d0', node_type='1', metadata={}, hash='69738bf6c1376bfa4525d29d04967d6ec2d6703f68a7c99dfd5b33a9e24c11e1')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='topic: \u5e93\u7684\u4f7f\u7528 content: \\n\\n\\n\u597d\u7684\uff0c\u6ca1\u95ee\u9898\u3002\u6839\u636e\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u5185\u5bb9\u548c\u4f60\u7684\u8865\u5145\uff0c\u6211\u5df2\u7ecf\u6536\u96c6\u4e86\u8db3\u591f\u7684\u4fe1\u606f\u6765\u4e3a\u4f60\u6574\u7406\u4e00\u4efd\u5173\u4e8e `llmada` \u5305\uff08\u7279\u522b\u662f `BianXieAdapter`\uff09\u7684\u4e2a\u4eba\u7f16\u7a0b\u4e60\u60ef\u8bb0\u5f55\u3002\u6211\u5c06\u6309\u7167\u4f60\u7684\u6307\u793a\uff0c\u53ea\u8fdb\u884c\u8bb0\u5f55\u548c\u603b\u7ed3\uff0c\u4e0d\u4f1a\u5728 Code Interpreter \u4e2d\u6267\u884c\u4ee3\u7801\u3002\\n\\n\u4ee5\u4e0b\u662f\u6839\u636e\u6211\u4eec\u7684\u4ea4\u6d41\u6574\u7406\u7684\u4f60\u7684\u4e2a\u4eba\u7f16\u7a0b\u4e60\u60ef\u8bb0\u5f55\uff1a\\n\\n---\\n\\n**\u4e2a\u4eba\u7f16\u7a0b\u4e60\u60ef\u8bb0\u5f55\uff1a`llmada` \u5305\uff08\u7279\u522b\u662f `BianXieAdapter`\uff09\u4f7f\u7528**\\n\\n**\u6838\u5fc3\u5e93:** `llmada` \u5305\uff0c\u63d0\u4f9b\u4e0e\u8bed\u8a00\u6a21\u578b API \u4ea4\u4e92\u7684\u9002\u914d\u5668\u3002\\n\\n**\u6838\u5fc3\u7ec4\u4ef6:** `BianXieAdapter` \u7c7b\uff0c\u7528\u4e8e\u4e0e BianXie AI API \u8fdb\u884c\u4ea4\u4e92\u3002\\n\\n**\u5b9e\u4f8b\u5316\u4e60\u60ef:**\\n\\n*   \u901a\u5e38\u5728\u9700\u8981\u4f7f\u7528\u65f6\u76f4\u63a5\u521b\u5efa `BianXieAdapter` \u7684\u65b0\u5b9e\u4f8b\uff0c\u4f8b\u5982 `bx = BianXieAdapter()`\u3002\\n*   API Key \u7684\u914d\u7f6e\u65b9\u5f0f\uff1a\\n    *   \u4f18\u5148\u901a\u8fc7\u73af\u5883\u53d8\u91cf `BIANXIE_API_KEY` \u8bbe\u7f6e\u3002\\n    *   \u4e5f\u652f\u6301\u5728\u521d\u59cb\u5316\u65f6\u901a\u8fc7\u53c2\u6570 `api_key` \u4f20\u5165\u3002\\n*   API Base URL \u9ed8\u8ba4\u4e3a \"https://api.bianxie.ai/v1/chat/completions\"\uff0c\u901a\u5e38\u4e0d\u8fdb\u884c\u4fee\u6539\u3002\\n\\n**\u6a21\u578b\u548c\u53c2\u6570\u8bbe\u7f6e\u4e60\u60ef:**\\n\\n*   `self.model_pool` \u4e2d\u5305\u542b\u4e86\u975e\u5e38\u4e30\u5bcc\u7684\u6a21\u578b\u5217\u8868\uff0c\u6db5\u76d6\u4e86\u591a\u79cd\u6a21\u578b\u63d0\u4f9b\u5546\u3002\\n*   **Temperature:** \u5f88\u5c11\u624b\u52a8\u8bbe\u7f6e `temperature` \u53c2\u6570\uff0c\u503e\u5411\u4e8e\u4f7f\u7528\u9ed8\u8ba4\u503c 0.7\u3002\u8ba4\u4e3a\u6e29\u5ea6\u5bf9\u5927\u90e8\u5206\u4efb\u52a1\u5f71\u54cd\u4e0d\u5927\uff0c\u6216\u66f4\u503e\u5411\u4e8e\u4f9d\u8d56 prompt \u6765\u63a7\u5236\u8f93\u51fa\u98ce\u683c\u3002\\n*   **\u6a21\u578b\u9009\u62e9:** \u5177\u4f53\u6700\u5e38\u7528\u7684\u6a21\u578b\u5c1a\u4e0d\u660e\u786e\uff0c\u4f46\u77e5\u9053\u6709\u5927\u91cf\u7684\u6a21\u578b\u53ef\u4f9b\u9009\u62e9\uff0c\u5e76\u6839\u636e\u4efb\u52a1\u573a\u666f\u53ef\u80fd\u9009\u62e9\u4e0d\u540c\u7684\u6a21\u578b\u3002\\n\\n**\u4e3b\u8981\u65b9\u6cd5\u4f7f\u7528\u4e60\u60ef:**\\n\\n*   **`product(prompt: str) -&gt; str`:**\\n    *   \u7528\u4e8e\u5355\u8f6e\u95ee\u7b54\u6216\u57fa\u4e8e\u4e00\u4e2a prompt \u751f\u6210\u6587\u672c\u3002\\n    *   \u5e38\u89c1\u4f7f\u7528\u573a\u666f\u5305\u62ec\u4fe1\u606f\u63d0\u53d6\uff08\u5982 `extra_text` \u51fd\u6570\u4e2d\u7684\u4f8b\u5b50\uff09\u3001\u6587\u672c\u751f\u6210\u7b49\u3002\\n    *   Prompt \u7684\u6784\u5efa\u901a\u5e38\u7ed3\u5408\u5176\u4ed6\u5e93\uff08\u5982 `promptlibz`\uff09\u4f7f\u7528\u6a21\u677f\u8fdb\u884c\u53c2\u6570\u5316\u3002\\n*   **`chat(messages: list) -&gt; str`:**\\n    *   \u7528\u4e8e\u591a\u8f6e\u5bf9\u8bdd\uff0c\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u6d88\u606f\u5b57\u5178\u7684\u5217\u8868\u3002\\n    *   \u6784\u5efa `messages` \u5217\u8868\u65f6\uff0c\u4f1a\u5305\u542b\u7528\u6237\u548c\u52a9\u624b\u6d88\u606f\uff0c\u53ef\u80fd\u4f7f\u7528 system \u6d88\u606f\u6765\u8bbe\u7f6e\u5bf9\u8bdd\u4e0a\u4e0b\u6587\u3002\\n*   **`product_stream(prompt: str) -&gt; str` (Generator):**\\n    *   \u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u7528\u4e8e\u5355\u8f6e\u95ee\u7b54\u3002\\n    *   \u5728\u9700\u8981\u5b9e\u65f6\u5c55\u793a\u751f\u6210\u8fc7\u7a0b\u6216\u5904\u7406\u5927\u578b\u8f93\u51fa\u65f6\u4f7f\u7528\u3002\\n*   **`chat_stream(messages: list) -&gt; str` (Generator):**\\n    *   \u652f\u6301\u6d41\u5f0f\u8f93\u51fa\uff0c\u7528\u4e8e\u591a\u8f6e\u5bf9\u8bdd\u3002\\n    *   \u5728\u9700\u8981\u5b9e\u65f6\u5c55\u793a\u5bf9\u8bdd\u751f\u6210\u8fc7\u7a0b\u65f6\u4f7f\u7528\u3002\\n*   **`product_modal(prompt: RichPromptTemplate) -&gt; str`:**\\n    *   \u7528\u4e8e\u5904\u7406 `RichPromptTemplate` \u7c7b\u578b\u7684\u63d0\u793a\uff0c\u53ef\u80fd\u6d89\u53ca\u591a\u6a21\u6001\u6216\u5176\u4ed6\u590d\u6742\u63d0\u793a\u7ed3\u6784\u3002\\n    *   \u4f7f\u7528\u573a\u666f\u76f8\u5bf9\u8f83\u5c11\u6216\u7279\u5b9a\u3002\\n*   **`set_model(model_name: str)`:** \u7528\u4e8e\u52a8\u6001\u5207\u6362\u6a21\u578b\uff0c\u4f46\u4f7f\u7528\u9891\u7387\u76f8\u5bf9\u8f83\u4f4e\uff0c\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u5728\u4ee3\u7801\u903b\u8f91\u4e2d\u6839\u636e\u4efb\u52a1\u56fa\u5b9a\u4f7f\u7528\u67d0\u4e2a\u6a21\u578b\u3002\\n*   **`get_model() -&gt; list[str]`:**', mimetype='text/plain', start_char_idx=0, end_char_idx=1599, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.7208659709500019),\n NodeWithScore(node=TextNode(id_='f310d7be-885d-4609-98a0-5bef4ac80c3e', embedding=None, metadata={'topic': 'mermaid', 'status': None, 'creation_date': '2025-05-19 18:34:38', 'tags': ['python'], 'link': ''}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='d0036b88-1eac-4fa1-9089-c8c01ea44728', node_type='4', metadata={'topic': 'mermaid', 'status': None, 'creation_date': '2025-05-19 18:34:38', 'tags': ['python'], 'link': ''}, hash='ad69cbae75958017227fb1c8f9b4ad86188583eaae1ece30cdb395d7c2a13ace'), &lt;NodeRelationship.NEXT: '3'&gt;: RelatedNodeInfo(node_id='b45c9085-b318-4c19-a823-6df1f6c16893', node_type='1', metadata={}, hash='4e557c68971b815628e1ff8ad9c0631f2c543520725607fa57c0e87f66e4308f')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='topic: mermaid content: \\n\\n\\n### \u4e2a\u4eba\u4e60\u60ef\u8bb0\u5f55\uff1a\u7f16\u7a0b\u573a\u666f\u4e0b\u7684 Mermaid \u4f7f\u7528\\n\\n**\u6838\u5fc3\u7406\u5ff5\uff1a**\\n\\n- \u5c06 Mermaid \u4f5c\u4e3a\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u4e8c\u7ef4\u5173\u7cfb\u8868\u793a\u65b9\u5f0f\uff0c\u4ee5\u4fbf\u5927\u6a21\u578b\uff08\u4ee5\u53ca\u81ea\u5df1\uff09\u66f4\u6709\u6548\u5730\u7406\u89e3\u548c\u5904\u7406\u4fe1\u606f\u3002\\n- \u91cd\u70b9\u5728\u4e8e\u5173\u7cfb\u672c\u8eab\u7684\u6e05\u6670\u8868\u8fbe\uff0c\u800c\u975e\u56fe\u7684\u7f8e\u89c2\u6027\u3002\\n\\n**\u4e3b\u8981\u5de5\u5177\u548c\u5e73\u53f0\uff1a**\\n\\n- **Mermaid\uff1a** \u7528\u4e8e\u901a\u8fc7\u7b80\u6d01\u7684\u6587\u672c\u8bed\u6cd5\u5b9a\u4e49\u4e8c\u7ef4\u5173\u7cfb\u56fe\u3002\\n- **Obsidian Canvas\uff1a** \u4f5c\u4e3a\u4e3b\u8981\u7684**\u4eba\u7c7b\u4ea4\u4e92\u754c\u9762**\uff0c\u7528\u4e8e\u8fdb\u884c\u4efb\u52a1\u5206\u89e3\u7684\u521d\u6b65\u53ef\u89c6\u5316\u8bbe\u8ba1\u548c\u5bf9\u5927\u6a21\u578b\u4f18\u5316\u7ed3\u679c\u7684\u53ef\u89c6\u5316\u5c55\u793a\u3002\\n- **\u5927\u6a21\u578b\uff1a** \u6838\u5fc3\u529f\u80fd\u5728\u4e8e**\u7406\u89e3**\u7531 Mermaid \u8868\u793a\u7684\u56fe\u7ed3\u6784\uff0c\u5e76\u6839\u636e\u7279\u5b9a\u8981\u6c42\u8fdb\u884c**\u4f18\u5316\u548c\u66f4\u65b0**\uff0c\u5b9e\u73b0\u4eba\u673a\u534f\u4f5c\u3002\\n- **NetworkX (\u6f5c\u5728\u7ed3\u5408)\uff1a** \u53ef\u80fd\u7528\u4e8e\u5bf9 Mermaid \u5b9a\u4e49\u7684\u56fe\u7ed3\u6784\u8fdb\u884c\u66f4\u6df1\u5165\u7684**\u5206\u6790**\u3002\\n\\n**\u4e3b\u8981\u4f7f\u7528\u573a\u666f\uff1a**\\n\\n- **\u4efb\u52a1\u5206\u89e3\u548c\u89c4\u5212\uff1a** \u5c06\u590d\u6742\u7684\u4efb\u52a1\u5206\u89e3\u4e3a\u5b50\u4efb\u52a1\uff0c\u5e76\u68b3\u7406\u5b83\u4eec\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u548c\u987a\u5e8f\uff0c\u7528\u4e8e\u9879\u76ee\u7ba1\u7406\u548c\u4e2a\u4eba\u89c4\u5212\u3002\\n- **\u7406\u89e3\u548c\u5904\u7406\u4e8c\u7ef4\u5173\u7cfb\uff1a** \u4e0d\u4ec5\u9650\u4e8e\u4efb\u52a1\uff0c\u4e5f\u53ef\u80fd\u7528\u4e8e\u8868\u793a\u6982\u5ff5\u4e4b\u95f4\u7684\u5173\u7cfb\u3001\u4ee3\u7801\u6a21\u5757\u4e4b\u95f4\u7684\u4f9d\u8d56\u7b49\u3002\\n\\n**\u4e3b\u8981\u56fe\u8868\u7c7b\u578b\uff1a**\\n\\n- **\u6709\u5411\u56fe (Directed Graph)\uff1a** \u4e3b\u8981\u7528\u4e8e\u8868\u793a\u5355\u5411\u7684\u5f71\u54cd\u3001\u4f9d\u8d56\u6216\u6d41\u7a0b\u65b9\u5411\u3002\\n\\n**\u4f7f\u7528\u65b9\u5f0f\uff1a**\\n\\n- **\u7b80\u5355\u4f7f\u7528\uff1a** \u4fa7\u91cd\u4e8e\u4f7f\u7528\u57fa\u672c\u7684\u8282\u70b9\u548c\u8fde\u63a5\u7ebf\uff0c\u4e0d\u8ffd\u6c42\u590d\u6742\u7684\u6837\u5f0f\u3001\u6807\u7b7e\u3001\u5b50\u56fe\u7b49\u9ad8\u7ea7\u529f\u80fd\u3002\u76ee\u7684\u662f\u4e3a\u4e86**\u6700\u5927\u5316\u8f6c\u5316\u6548\u7387\u548c\u6613\u8bfb\u6027**\uff0c\u65b9\u4fbf\u4eba\u4e0e\u5927\u6a21\u578b\u4e4b\u95f4\u7684\u4ea4\u4e92\u3002\\n- **\u76f4\u63a5\u5728 Obsidian \u4e2d\u4f7f\u7528\uff1a** \u5728 Markdown \u7b14\u8bb0\u4e2d\u76f4\u63a5\u4e66\u5199 Mermaid \u4ee3\u7801\u5757\u3002\\n\\n**\u4e0e\u5927\u6a21\u578b\u7684\u4ea4\u4e92\u6a21\u5f0f\uff1a**\\n\\n- **\u8f93\u5165\uff1a** \u76f4\u63a5\u5c06 Obsidian \u4e2d\u7684 Mermaid \u4ee3\u7801\u5757\u8f93\u5165\u7ed9\u5927\u6a21\u578b\u3002\\n- **\u8f93\u51fa\uff1a** \u671f\u671b\u5927\u6a21\u578b\u8f93\u51fa\u4f18\u5316\u6216\u66f4\u65b0\u540e\u7684 Mermaid \u4ee3\u7801\u5757\u3002\\n- **\u671f\u671b\u5927\u6a21\u578b\u7684\u7406\u89e3\u548c\u5904\u7406\u80fd\u529b\uff1a**\\n    - **\u7406\u89e3\u56fe\u7684\u7ed3\u6784\uff1a** \u8bc6\u522b\u8282\u70b9\u3001\u8fde\u63a5\u3001\u65b9\u5411\u7b49\u3002\\n    - **\u6839\u636e\u8981\u6c42\u4f18\u5316\u6216\u66f4\u65b0\u56fe\uff1a** \u4f8b\u5982\uff0c\u5206\u89e3\u4efb\u52a1\u3001\u8c03\u6574\u4f9d\u8d56\u3001\u5efa\u8bae\u5e76\u884c\u5316\u7b49\u3002\\n    - **\u5b9e\u73b0\u4e0e\u4eba\u7c7b\u7684\u4ea4\u6d41\uff1a** \u901a\u8fc7\u56fe\u7684\u4fee\u6539\u6765\u4f53\u73b0\u7406\u89e3\u548c\u5efa\u8bae\u3002\\n\\n**\u4e0e Obsidian Canvas \u7684\u5de5\u4f5c\u6d41\uff1a**\\n\\n- **\u753b\u5e03\u521d\u6b65\u8bbe\u8ba1 (\u4eba\u7c7b)\uff1a** \u5728 Canvas \u4e2d\u76f4\u89c2\u5730\u7ed8\u5236\u4efb\u52a1\u5206\u89e3\u7684\u521d\u6b65\u7ed3\u6784\u3002\\n- **\u8f6c\u5316\u4e3a Mermaid (\u5de5\u5177/\u811a\u672c/\u624b\u52a8)\uff1a** \u5c06 Canvas \u7684\u89c6\u89c9\u7ed3\u6784\u8f6c\u5316\u4e3a\u7b80\u6d01\u7684 Mermaid \u4ee3\u7801\u3002\\n- **\u5927\u6a21\u578b\u4f18\u5316 (\u5927\u6a21\u578b)\uff1a** \u5c06 Mermaid \u4ee3\u7801\u8f93\u5165\u5927\u6a21\u578b\u8fdb\u884c\u5904\u7406\u3002\\n- **\u8f6c\u5316\u4e3a Canvas (\u5de5\u5177/\u811a\u672c/\u624b\u52a8)\uff1a** \u5c06\u5927\u6a21\u578b\u4f18\u5316\u540e\u7684 Mermaid \u4ee3\u7801\u8f6c\u5316\u56de Canvas \u8fdb\u884c\u53ef\u89c6\u5316\u5c55\u793a\u3002\\n- **\u4eba\u7c7b\u7ee7\u7eed\u64cd\u4f5c\u548c\u4ea4\u4e92 (\u4eba\u7c7b)\uff1a** \u5728 Canvas \u4e2d\u67e5\u770b\u3001\u4fee\u6539\u5e76\u7ee7\u7eed\u8fed\u4ee3\u3002\\n\\n**\u9009\u62e9 Mermaid \u7684\u539f\u56e0\uff1a**\\n\\n- **\u8bed\u6cd5\u7b80\u6d01\u6613\u61c2\uff1a** \u65b9\u4fbf\u5feb\u901f\u4e66\u5199\u548c\u7406\u89e3\u3002\\n- **\u4e3b\u6d41\u5de5\u5177\uff1a** \u5e7f\u6cdb\u5e94\u7528\uff0c\u5927\u6a21\u578b\u7684\u8bad\u7ec3\u96c6\u4e2d\u5305\u542b\u5927\u91cf Mermaid \u76f8\u5173\u6570\u636e\uff0c\u5bf9 Markdown \u8bed\u6cd5\u7406\u89e3\u826f\u597d\u3002\\n-', mimetype='text/plain', start_char_idx=0, end_char_idx=1360, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.7168775125152664),\n NodeWithScore(node=TextNode(id_='b45c9085-b318-4c19-a823-6df1f6c16893', embedding=None, metadata={'topic': 'mermaid', 'status': None, 'creation_date': '2025-05-19 18:34:38', 'tags': ['python'], 'link': ''}, excluded_embed_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], excluded_llm_metadata_keys=['file_name', 'file_type', 'file_size', 'creation_date', 'last_modified_date', 'last_accessed_date'], relationships={&lt;NodeRelationship.SOURCE: '1'&gt;: RelatedNodeInfo(node_id='d0036b88-1eac-4fa1-9089-c8c01ea44728', node_type='4', metadata={'topic': 'mermaid', 'status': None, 'creation_date': '2025-05-19 18:34:38', 'tags': ['python'], 'link': ''}, hash='ad69cbae75958017227fb1c8f9b4ad86188583eaae1ece30cdb395d7c2a13ace'), &lt;NodeRelationship.PREVIOUS: '2'&gt;: RelatedNodeInfo(node_id='f310d7be-885d-4609-98a0-5bef4ac80c3e', node_type='1', metadata={'topic': 'mermaid', 'status': None, 'creation_date': '2025-05-19 18:34:38', 'tags': ['python'], 'link': ''}, hash='4b66706420b2e2db9de7c71ec24a96d954778480892f152596c5d39c1697803a')}, metadata_template='{key}: {value}', metadata_separator='\\n', text='Mermaid \u76f8\u5173\u6570\u636e\uff0c\u5bf9 Markdown \u8bed\u6cd5\u7406\u89e3\u826f\u597d\u3002\\n- **\u9002\u5408\u8868\u8fbe\u4e8c\u7ef4\u5173\u7cfb\uff1a** \u80fd\u591f\u6e05\u6670\u5730\u8868\u793a\u8282\u70b9\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\\n\\n**\u6f5c\u5728\u9700\u6c42\uff1a**\\n\\n- \u5bf9 Mermaid \u7684 Git \u56fe\u8868\u7c7b\u578b\u6709\u5174\u8da3\uff0c\u53ef\u80fd\u4f1a\u5728\u672a\u6765\u5e94\u7528\u4e8e\u4ee3\u7801\u7248\u672c\u7ba1\u7406\u548c\u534f\u4f5c\u573a\u666f\u3002\\n\\n**\u6311\u6218\u548c\u4f18\u5316\u65b9\u5411 (\u63a8\u6d4b)\uff1a**\\n\\n- **Canvas \u5230 Mermaid\uff0cMermaid \u5230 Canvas \u7684\u8f6c\u5316\u5de5\u5177\uff1a** \u76ee\u524d\u7684\u8f6c\u5316\u6548\u7387\u548c\u51c6\u786e\u6027\u53ef\u80fd\u9700\u8981\u63d0\u5347\u3002\\n- **\u5927\u6a21\u578b\u5bf9\u590d\u6742\u8bed\u4e49\u7684\u7406\u89e3\uff1a** \u5982\u4f55\u8ba9\u5927\u6a21\u578b\u4e0d\u4ec5\u4ec5\u7406\u89e3\u56fe\u7684\u7ed3\u6784\uff0c\u8fd8\u80fd\u7406\u89e3\u8282\u70b9\u548c\u8fb9\u4e2d\u8574\u542b\u7684\u7279\u5b9a\u4efb\u52a1\u6216\u6982\u5ff5\u7684\u542b\u4e49\uff0c\u4ee5\u4fbf\u8fdb\u884c\u66f4\u667a\u80fd\u7684\u4f18\u5316\u3002\\n- **\u5927\u6a21\u578b\u751f\u6210 Mermaid \u4ee3\u7801\u7684\u51c6\u786e\u6027\u548c\u89c4\u8303\u6027\uff1a** \u5982\u4f55\u786e\u4fdd\u5927\u6a21\u578b\u751f\u6210\u7684\u4ee3\u7801\u7b26\u5408 Mermaid \u8bed\u6cd5\uff0c\u5e76\u4e14\u80fd\u591f\u88ab Canvas \u6b63\u786e\u89e3\u6790\u3002\\n\\n---', mimetype='text/plain', start_char_idx=1327, end_char_idx=1691, metadata_seperator='\\n', text_template='{metadata_str}\\n\\n{content}'), score=0.7141233024626293)]\n</code></pre>"},{"location":"use_case/#update","title":"update","text":"<pre><code>query.update('\u6211\u7684\u6c49\u738b') # \u60f3\u505a\u4e00\u4e2ametedata\n</code></pre>"},{"location":"use_case/#tools","title":"tools","text":"<pre><code>query.tools('kv.html')\n</code></pre>"}]}